<?php

defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
require APPPATH . '/libraries/REST_Controller.php';

/**
 * Manage user information 
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Kovarthanan 
 */
class Users extends REST_Controller {

    function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->database();
        $this->load->model('User_model');
        $this->load->model('Auth_model');
        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['user_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['user_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['user_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function get_user_get()
    {   
        $users = $this->User_model->userList();
        $id = $this->get('id');
        

        // If the id parameter doesn't exist return all the users

        if ($id === NULL)
        {
            // Check if the users data store contains users (in case the database result returns NULL)
            if ($users)
            {
                // Set the response and exit
                $this->response($users, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
            }
            else
            {
                // Set the response and exit
                $this->response([
                    'status' => FALSE,
                    'message' => 'No users were found'
                ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
            }
        }

        // Find and return a single record for a particular user.
        $id = (int) $id;

        // Validate the id.
        if ($id <= 0)
        {
            // Invalid id, set the response and exit.
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        // Get the user from the array, using the id as key for retreival.
        // Usually a model is to be used for this.

        $user = NULL;

        if (!empty($users))
        {
            foreach ($users as $key => $value)
            {
                if (isset($value['id']) && $value['id'] == $id)
                {
                    $user = $value;
                }
            }
        }

        if (!empty($user))
        {
            $this->set_response($user, REST_Controller::HTTP_OK); // OK (200) being the HTTP response code
        }
        else
        {
            $this->set_response([
                'status' => FALSE,
                'message' => 'User could not be found'
            ], REST_Controller::HTTP_NOT_FOUND); // NOT_FOUND (404) being the HTTP response code
        }
    }

    public function users_post()
    {
        echo "string";
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function create_user_post()
    {
        if ( $this->post('username') and $this->post('password') and $this->post('user_id'))
        {            
            $userDetail = [            
                'username' => $this->post('username'),
                'password' => md5($this->post('password')),          
            ];
            $auth_id = $this->Auth_model->get_authentication_id( $this->post('user_id') );
            if ( $auth_id ) {
                $users = $this->User_model->createUser($userDetail); 
                if ($users) {

                    if ($users == 1062) {
                            $message = [
                                'status' => FALSE,
                                'message' => 'Ho Ho!! You are already an Aspirian'
                            ];    
                            $response_code = REST_Controller::HTTP_BAD_REQUEST;                    
                    } 
                    else 
                    {
                            $message = [
                                'id' => $users,
                                'message' => 'Hurrah!! You are successfully added to the Aspire family'
                            ];
                            $response_code = REST_Controller::HTTP_CREATED;   
                    }               
                }
            }
            else 
            {
                 $message = [
                       'id' => $this->post('user_id'),
                       'message' => 'You dont have permission to create users'
                        ];
                $response_code = REST_Controller::HTTP_CREATED;   
          }    

        }            
        else
        {
                $message = [
                    'status' => FALSE,
                    'message' => 'OOPS!! Please provoide valid username, password or user_id'
                    ];
                    $response_code = REST_Controller::HTTP_BAD_REQUEST;                
        }   
        
        $this->response( $message,$response_code);
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(NULL, REST_Controller::HTTP_BAD_REQUEST); // BAD_REQUEST (400) being the HTTP response code
        }

        $this->User_model->deleteUser($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, REST_Controller::HTTP_NO_CONTENT); // NO_CONTENT (204) being the HTTP response code
    }

}
